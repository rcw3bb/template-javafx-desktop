import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors
import java.util.stream.Stream

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'org.beryx.jlink' version '2.5.1'
}

group 'xyz.ronella.template'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.12

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            include "**/*.*"
        }
    }
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    version = '12'
}

mainClassName = "$moduleName/xyz.ronella.template.javafx.desktop.Main"

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = 'template.javafx.desktop'
        mainClassName = 'template.javafx.desktop/xyz.ronella.template.javafx.desktop.Main'
    }
    forceMerge('log4j-api')
    imageName = "${project.name}-${version}"
}

processResources {
    doFirst {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*java.?main\$")}
                .findFirst().ifPresent { ___file ->

            def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
            def destinationDir = ___file.path

            copy {
                from(sourceDir) {
                    include '**/*.fxml'
                    include '**/*.xml'
                }
                into(destinationDir)
            }
        }
    }
    doLast {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*resources.?main\$")}
                .findFirst().ifPresent { _1_file ->

            Stream<Path> stream = Files.walk(Paths.get(_1_file.path))
            try {
                def fileToDelete = stream.filter{___path -> Files.isRegularFile(___path) && ___path.toFile().path.endsWith("xml")}.map{___path -> ___path.toFile()}
                            .collect(Collectors.toList()).toArray()

                if (fileToDelete.size()>0) {
                    delete {
                        delete fileToDelete
                    }
                }
            }
            finally {
                stream.close()
            }
        }
    }
}
