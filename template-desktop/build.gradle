import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat
import java.util.stream.Collectors
import java.util.stream.Stream
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'pmd'
    id 'jacoco'
    alias(libs.plugins.javafxplugin)
    alias(libs.plugins.jlink)
}

dependencyLocking {
    lockAllConfigurations()
}

apply from: '../common.gradle'

dependencies {
    implementation project(path: ':template-business')
}

ext {
    packageName = "${project.name}-${version}"
    logConfig = "logback.xml"
    FILTER_TOKEN = [
            'project.name': project.name
            ,'app.version' : version.toString()
            ,'build.date' : new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').format(new Date())
    ]
}

sourceSets {
    main {
        java {
            include "**/*.*"
        }
    }
}

application {
    mainModule = MAIN_MODULE
    mainClass = MAIN_CLASS
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    version = '21'
}

pmd {
    consoleOutput = true
    toolVersion = "7.7.0"
    rulesMinimumPriority = 5
    ruleSetFiles = files('../quality/pmd/java/custom.xml')
    ruleSets = []
}

pmdTest.enabled = false

test {
    dependsOn(pmdMain)
    finalizedBy(jacocoTestReport)
}

processResources {

    filesMatching('*.properties') {
        filter(ReplaceTokens, tokens: FILTER_TOKEN)
    }

    filesMatching(logConfig) {
        filter(ReplaceTokens, tokens: FILTER_TOKEN)
    }

    def resources = ['fxml', 'xml', 'png', 'properties']
    def resourceFiles = [logConfig]
    doFirst {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*java.?main\$")}
                .findFirst().ifPresent { ___file ->

            def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
            def destinationDir = ___file.path

            copy {
                //These are the files copied to the build/classes/java/main directory.
                filesMatching('*.properties') {
                    filter(ReplaceTokens, tokens: FILTER_TOKEN)
                }
                from(sourceDir) {
                    exclude logConfig
                    include resources.stream().map{ ___ext -> "**/*.${___ext}"}.collect(Collectors.toList())
                }
                into(destinationDir)
            }
        }
    }
    doLast {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*resources.?main\$")}
                .findFirst().ifPresent { _1_file ->

            Stream<Path> stream = Files.walk(Paths.get(_1_file.path))
            try {
                def fileToDelete = stream.filter{___path ->
                    Files.isRegularFile(___path)
                            && resources.stream().any {___ext -> ___path.toFile().path.endsWith(___ext)}
                            && !(resourceFiles.find{___file -> ___path.endsWith(___file)} != null)
                }.map{___path -> ___path.toFile()}.collect(Collectors.toList()).toArray()

                if (fileToDelete.size()>0) {
                    delete {
                        delete fileToDelete
                    }
                }
            }
            finally {
                stream.close()
            }
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', 'zip-9', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = application.mainModule
        mainClassName = application.mainClass
        noConsole = true
        jvmArgs = ["-Dlogback.configurationFile={{BIN_DIR}}\\conf\\${logConfig}"]
    }
    imageName = packageName.toString()
}

task preparePackage(dependsOn: ['jlink']) {
    doLast {
        def buildDirPath = layout.buildDirectory.asFile.get().absolutePath
        def projectName = "${project.name}-${version}"
        def batchFile = "${project.name}.bat"
        def batchPath = Paths.get(buildDirPath, projectName, batchFile).toFile()

        def jlinkTargetDir = Paths.get(buildDirPath, projectName)
        def jlinkConfDir = Paths.get(jlinkTargetDir.toFile().absolutePath, "conf")

        def logbackFile = logConfig
        def logbackPath = Paths.get(jlinkConfDir.toFile().absolutePath, logbackFile).toFile()

        def mainResources = sourceSets.main.resources.sourceDirectories.asPath
        def outputResources = sourceSets.main.output.resourcesDir

        copy {
            from(Paths.get(buildDirPath, projectName, "bin"))
            into(Paths.get(buildDirPath, projectName))
            include batchFile
        }

        copy {
            from(mainResources) {
                exclude '*.fxml'
                exclude 'icon.png'
                exclude 'app-info.properties'
                exclude logConfig
            }
            into(jlinkConfDir)
        }

        copy {
            from (outputResources) {
                include logConfig
            }
            into(jlinkConfDir)
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                batchPath.write(updatedContent)
            }
        }

        if (logbackPath.exists()) {
            def pattern = "logs/"
            def replaceWith = "../${pattern}"
            def content = logbackPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                logbackPath.write(updatedContent)
            }
        }
    }
}

task packWin(dependsOn: ['preparePackage']) {
    doLast{
        def projectName = "${project.name}-${version}"
        def buildDirPath = layout.buildDirectory.asFile.get().absolutePath
        def jlinkOutputDir = Paths.get(buildDirPath, projectName)
        def outputFile =  Paths.get(buildDirPath, "pack", "${projectName}-win64.zip")

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}