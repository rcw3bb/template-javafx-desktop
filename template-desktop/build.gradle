import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors
import java.util.stream.Stream

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.jlink' version '2.24.4'
}

apply from: '../group-version.gradle'
apply from: '../compatibility.gradle'
apply from: '../repositories.gradle'
apply from: '../common-dependencies.gradle'

dependencies {
    implementation project(path: ':template-business')
}

sourceSets {
    main {
        java {
            include "**/*.*"
        }
    }
}

application {
    mainModule = MAIN_MODULE
    mainClass = MAIN_CLASS
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    version = '17'
}

processResources {
    def resources = ['fxml', 'xml', 'png', 'properties']
    doFirst {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*java.?main\$")}
                .findFirst().ifPresent { ___file ->

            def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
            def destinationDir = ___file.path

            copy {
                from(sourceDir) {
                    include resources.stream().map{ ___ext -> "**/*.${___ext}"}.collect(Collectors.toList())
                }
                into(destinationDir)
            }
        }
    }
    doLast {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*resources.?main\$")}
                .findFirst().ifPresent { _1_file ->

            Stream<Path> stream = Files.walk(Paths.get(_1_file.path))
            try {
                def fileToDelete = stream.filter{___path -> Files.isRegularFile(___path) &&
                        resources.stream().any {___ext -> ___path.toFile().path.endsWith(___ext)}
                }.map{___path -> ___path.toFile()}
                            .collect(Collectors.toList()).toArray()

                if (fileToDelete.size()>0) {
                    delete {
                        delete fileToDelete
                    }
                }
            }
            finally {
                stream.close()
            }
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = "${MAIN_MODULE}"
        mainClassName = "${MAIN_CLASS}"
    }
    forceMerge('slf4j-api','log4j-api')
    imageName = "${project.name}-${version}"
}

task preparePackage(dependsOn: ['jlink']) {
    doLast {
        def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
        def projectName = "${project.name}-${version}"

        copy {
            from(sourceDir)
            into(Paths.get(buildDir.absolutePath, projectName))
            include "template-desktop.exe"
        }

        copy {
            from(sourceDir.toString())
            into(Paths.get(buildDir.absolutePath, projectName, "conf"))
            include "nocon.json"
        }

    }
}

task packWin(dependsOn: ['preparePackage']) {
    doLast{
        def projectName = "${project.name}-${version}"
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, projectName)
        def outputFile =  Paths.get(buildDir.absolutePath, "pack", "${projectName}-win64.zip")

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}